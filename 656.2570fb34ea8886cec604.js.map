{"version":3,"sources":["./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","./node_modules/rxjs/_esm2015/internal/Observable.js","./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js","./node_modules/rxjs/_esm2015/internal/util/canReportError.js","./node_modules/rxjs/_esm2015/internal/util/pipe.js","./node_modules/rxjs/_esm2015/internal/Observer.js","./node_modules/rxjs/_esm2015/internal/Subscriber.js","./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js","./node_modules/rxjs/_esm2015/internal/Subscription.js","./node_modules/rxjs/_esm2015/internal/config.js","./node_modules/rxjs/_esm2015/internal/innerSubscribe.js","./node_modules/rxjs/_esm2015/internal/observable/from.js","./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js","./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js","./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js","./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js","./node_modules/rxjs/_esm2015/internal/util/isIterable.js","./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js","./node_modules/rxjs/_esm2015/internal/observable/fromArray.js","./node_modules/rxjs/_esm2015/internal/observable/of.js","./node_modules/rxjs/_esm2015/internal/operators/concatMap.js","./node_modules/rxjs/_esm2015/internal/operators/filter.js","./node_modules/rxjs/_esm2015/internal/operators/map.js","./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js","./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js","./node_modules/rxjs/_esm2015/internal/symbol/iterator.js","./node_modules/rxjs/_esm2015/internal/symbol/observable.js","./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js","./node_modules/rxjs/_esm2015/internal/util/hostReportError.js","./node_modules/rxjs/_esm2015/internal/util/identity.js","./node_modules/rxjs/_esm2015/internal/util/isArray.js","./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js","./node_modules/rxjs/_esm2015/internal/util/isFunction.js","./node_modules/rxjs/_esm2015/internal/util/isObject.js","./node_modules/rxjs/_esm2015/internal/util/isPromise.js","./node_modules/rxjs/_esm2015/internal/util/isScheduler.js","./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js","./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js","./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js","./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js","./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js"],"names":["HttpHandler","HttpBackend","HttpHeaders","headers","this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","delete","fn","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","v","encodeURIComponent","replace","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","map","rawParams","codec","param","eqIdx","val","decodeKey","decodeValue","list","paramParser","isArray","res","params","_value","eKey","encodeKey","encodeValue","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","context","toString","urlWithParams","qIdx","JSON","stringify","type","_a","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","super","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","of","pipe","handle","res$","event","request","callbackParam","append","ɵfac","t","ɵprov","factory","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","observer","callback","nextCallback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","DOCUMENT","JsonpInterceptor","jsonp","XSSI_PREFIX","HttpXhrBackend","xhrFactory","xhr","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","getAllResponseHeaders","responseURL","test","getResponseHeader","getResponseUrl","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","ɵmod","ɵinj","useExisting","multi","HttpClientModule","imports","withOptions","HttpClientJsonpModule","useFactory","XhrFactory","Observable","subscribe","_isScalar","_subscribe","operator","observable","source","observerOrNext","sink","nextOrObserver","Subscriber","rxSubscriber","toSubscriber","add","call","config","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","closed","destination","isStopped","canReportError","console","warn","promiseCtor","getPromiseCtor","reject","subscription","unsubscribe","subscriber","operations","fns","identity","input","prev","x","create","empty","destinationOrNext","arguments","SafeSubscriber","_next","_error","_complete","_parentOrParents","_parentSubscriber","bind","_context","__tryOrSetError","__tryOrUnsub","useDeprecatedSynchronousErrorHandling","wrappedComplete","parent","UnsubscriptionError","UnsubscriptionErrorImpl","errors","i","prototype","Subscription","_subscriptions","_ctorUnsubscribe","_unsubscribe","remove","isFunction","e","flattenUnsubscriptionErrors","len","sub","isObject","teardown","EMPTY","tmp","subscriptions","subscriptionIndex","errs","_enable_super_gross_mode_that_will_cause_bad_things","stack","log","SimpleInnerSubscriber","notifyNext","notifyError","notifyComplete","SimpleOuterSubscriber","innerValue","innerSubscribe","result","innerSubscriber","s","scheduler","isInteropObservable","schedule","scheduleObservable","isPromise","schedulePromise","isArrayLike","scheduleArray","isIterable","iterator","return","done","scheduleIterable","TypeError","scheduled","subscribeTo","fromArray","args","pop","concatMap","project","resultSelector","predicate","thisArg","lift","FilterOperator","FilterSubscriber","count","MapOperator","MapSubscriber","mergeMap","concurrent","Number","POSITIVE_INFINITY","a","b","ii","MergeMapOperator","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscription","shift","getSymbolIterator","Symbol","Math","random","hostReportError","setTimeout","isScheduler","obj","obs","subscribeToArray","promise","iterable","item","array"],"mappings":"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","file":"656.2570fb34ea8886cec604.js","sourcesContent":["/**\n * @license Angular v12.0.5\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT, XhrFactory as XhrFactory$1, ɵparseCookieValue } from '@angular/common';\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        var _a;\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = (_a = update.context) !== null && _a !== void 0 ? _a : this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 /* NoContent */ : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204 /* NoContent */) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 /* Ok */ : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(ɵngcc1.XhrFactory)); };\nHttpXhrBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory$1 }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc1.XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\nHttpClientXsrfModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\nHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\nHttpClientJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f, HttpXsrfInterceptor as ɵangular_packages_common_http_http_g };\n\n//# sourceMappingURL=http.js.map","import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { Subscriber } from '../Subscriber';\nexport function canReportError(observer) {\n    while (observer) {\n        const { closed, destination, isStopped } = observer;\n        if (closed || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map","import { identity } from './identity';\nexport function pipe(...fns) {\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn) => fn(prev), input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport const empty = {\n    closed: true,\n    next(value) { },\n    error(err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete() { }\n};\n//# sourceMappingURL=Observer.js.map","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport class Subscriber extends Subscription {\n    constructor(destinationOrNext, error, complete) {\n        super();\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        destinationOrNext.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    [rxSubscriberSymbol]() { return this; }\n    static create(next, error, complete) {\n        const subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    }\n    unsubscribe() {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        super.unsubscribe();\n    }\n    _next(value) {\n        this.destination.next(value);\n    }\n    _error(err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.destination.complete();\n        this.unsubscribe();\n    }\n    _unsubscribeAndRecycle() {\n        const { _parentOrParents } = this;\n        this._parentOrParents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parentOrParents = _parentOrParents;\n        return this;\n    }\n}\nexport class SafeSubscriber extends Subscriber {\n    constructor(_parentSubscriber, observerOrNext, error, complete) {\n        super();\n        this._parentSubscriber = _parentSubscriber;\n        let next;\n        let context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    next(value) {\n        if (!this.isStopped && this._next) {\n            const { _parentSubscriber } = this;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    }\n    error(err) {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            const { useDeprecatedSynchronousErrorHandling } = config;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    }\n    complete() {\n        if (!this.isStopped) {\n            const { _parentSubscriber } = this;\n            if (this._complete) {\n                const wrappedComplete = () => this._complete.call(this._context);\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    }\n    __tryOrUnsub(fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    }\n    __tryOrSetError(parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    }\n    _unsubscribe() {\n        const { _parentSubscriber } = this;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscriber.js.map","const UnsubscriptionErrorImpl = (() => {\n    function UnsubscriptionErrorImpl(errors) {\n        Error.call(this);\n        this.message = errors ?\n            `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n        return this;\n    }\n    UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n    return UnsubscriptionErrorImpl;\n})();\nexport const UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport class Subscription {\n    constructor(unsubscribe) {\n        this.closed = false;\n        this._parentOrParents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._ctorUnsubscribe = true;\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    unsubscribe() {\n        let errors;\n        if (this.closed) {\n            return;\n        }\n        let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = this;\n        this.closed = true;\n        this._parentOrParents = null;\n        this._subscriptions = null;\n        if (_parentOrParents instanceof Subscription) {\n            _parentOrParents.remove(this);\n        }\n        else if (_parentOrParents !== null) {\n            for (let index = 0; index < _parentOrParents.length; ++index) {\n                const parent = _parentOrParents[index];\n                parent.remove(this);\n            }\n        }\n        if (isFunction(_unsubscribe)) {\n            if (_ctorUnsubscribe) {\n                this._unsubscribe = undefined;\n            }\n            try {\n                _unsubscribe.call(this);\n            }\n            catch (e) {\n                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n            }\n        }\n        if (isArray(_subscriptions)) {\n            let index = -1;\n            let len = _subscriptions.length;\n            while (++index < len) {\n                const sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    try {\n                        sub.unsubscribe();\n                    }\n                    catch (e) {\n                        errors = errors || [];\n                        if (e instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n                        }\n                        else {\n                            errors.push(e);\n                        }\n                    }\n                }\n            }\n        }\n        if (errors) {\n            throw new UnsubscriptionError(errors);\n        }\n    }\n    add(teardown) {\n        let subscription = teardown;\n        if (!teardown) {\n            return Subscription.EMPTY;\n        }\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (!(subscription instanceof Subscription)) {\n                    const tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default: {\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n        }\n        let { _parentOrParents } = subscription;\n        if (_parentOrParents === null) {\n            subscription._parentOrParents = this;\n        }\n        else if (_parentOrParents instanceof Subscription) {\n            if (_parentOrParents === this) {\n                return subscription;\n            }\n            subscription._parentOrParents = [_parentOrParents, this];\n        }\n        else if (_parentOrParents.indexOf(this) === -1) {\n            _parentOrParents.push(this);\n        }\n        else {\n            return subscription;\n        }\n        const subscriptions = this._subscriptions;\n        if (subscriptions === null) {\n            this._subscriptions = [subscription];\n        }\n        else {\n            subscriptions.push(subscription);\n        }\n        return subscription;\n    }\n    remove(subscription) {\n        const subscriptions = this._subscriptions;\n        if (subscriptions) {\n            const subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    }\n}\nSubscription.EMPTY = (function (empty) {\n    empty.closed = true;\n    return empty;\n}(new Subscription()));\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n//# sourceMappingURL=Subscription.js.map","let _enable_super_gross_mode_that_will_cause_bad_things = false;\nexport const config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            const error = new Error();\n            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map","import { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\nexport class SimpleInnerSubscriber extends Subscriber {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n    }\n    _next(value) {\n        this.parent.notifyNext(value);\n    }\n    _error(error) {\n        this.parent.notifyError(error);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.notifyComplete();\n        this.unsubscribe();\n    }\n}\nexport class ComplexInnerSubscriber extends Subscriber {\n    constructor(parent, outerValue, outerIndex) {\n        super();\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n    }\n    _next(value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n    }\n    _error(error) {\n        this.parent.notifyError(error);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    }\n}\nexport class SimpleOuterSubscriber extends Subscriber {\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n    notifyError(err) {\n        this.destination.error(err);\n    }\n    notifyComplete() {\n        this.destination.complete();\n    }\n}\nexport class ComplexOuterSubscriber extends Subscriber {\n    notifyNext(_outerValue, innerValue, _outerIndex, _innerSub) {\n        this.destination.next(innerValue);\n    }\n    notifyError(error) {\n        this.destination.error(error);\n    }\n    notifyComplete(_innerSub) {\n        this.destination.complete();\n    }\n}\nexport function innerSubscribe(result, innerSubscriber) {\n    if (innerSubscriber.closed) {\n        return undefined;\n    }\n    if (result instanceof Observable) {\n        return result.subscribe(innerSubscriber);\n    }\n    let subscription;\n    try {\n        subscription = subscribeTo(result)(innerSubscriber);\n    }\n    catch (error) {\n        innerSubscriber.error(error);\n    }\n    return subscription;\n}\n//# sourceMappingURL=innerSubscribe.js.map","import { Observable } from '../Observable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { scheduled } from '../scheduled/scheduled';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    else {\n        return scheduled(input, scheduler);\n    }\n}\n//# sourceMappingURL=from.js.map","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nexport function scheduled(input, scheduler) {\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return scheduleObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return schedulePromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return scheduleArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return scheduleIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=scheduled.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport function isInteropObservable(input) {\n    return input && typeof input[Symbol_observable] === 'function';\n}\n//# sourceMappingURL=isInteropObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function scheduleObservable(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        sub.add(scheduler.schedule(() => {\n            const observable = input[Symbol_observable]();\n            sub.add(observable.subscribe({\n                next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n                error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n                complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleObservable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function schedulePromise(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        sub.add(scheduler.schedule(() => input.then(value => {\n            sub.add(scheduler.schedule(() => {\n                subscriber.next(value);\n                sub.add(scheduler.schedule(() => subscriber.complete()));\n            }));\n        }, err => {\n            sub.add(scheduler.schedule(() => subscriber.error(err)));\n        })));\n        return sub;\n    });\n}\n//# sourceMappingURL=schedulePromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function isIterable(input) {\n    return input && typeof input[Symbol_iterator] === 'function';\n}\n//# sourceMappingURL=isIterable.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport function scheduleIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        let iterator;\n        sub.add(() => {\n            if (iterator && typeof iterator.return === 'function') {\n                iterator.return();\n            }\n        });\n        sub.add(scheduler.schedule(() => {\n            iterator = input[Symbol_iterator]();\n            sub.add(scheduler.schedule(function () {\n                if (subscriber.closed) {\n                    return;\n                }\n                let value;\n                let done;\n                try {\n                    const result = iterator.next();\n                    value = result.value;\n                    done = result.done;\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                    this.schedule();\n                }\n            }));\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map","import { Observable } from '../Observable';\nimport { subscribeToArray } from '../util/subscribeToArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return scheduleArray(input, scheduler);\n    }\n}\n//# sourceMappingURL=fromArray.js.map","import { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nexport function of(...args) {\n    let scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n        return scheduleArray(args, scheduler);\n    }\n    else {\n        return fromArray(args);\n    }\n}\n//# sourceMappingURL=of.js.map","import { mergeMap } from './mergeMap';\nexport function concatMap(project, resultSelector) {\n    return mergeMap(project, resultSelector, 1);\n}\n//# sourceMappingURL=concatMap.js.map","import { Subscriber } from '../Subscriber';\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nclass FilterOperator {\n    constructor(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    }\n}\nclass FilterSubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    }\n}\n//# sourceMappingURL=filter.js.map","import { Subscriber } from '../Subscriber';\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport class MapOperator {\n    constructor(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    }\n}\nclass MapSubscriber extends Subscriber {\n    constructor(destination, project, thisArg) {\n        super(destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    _next(value) {\n        let result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\n//# sourceMappingURL=map.js.map","import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\nexport const flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nexport function scheduleArray(input, scheduler) {\n    return new Observable(subscriber => {\n        const sub = new Subscription();\n        let i = 0;\n        sub.add(scheduler.schedule(function () {\n            if (i === input.length) {\n                subscriber.complete();\n                return;\n            }\n            subscriber.next(input[i++]);\n            if (!subscriber.closed) {\n                sub.add(this.schedule());\n            }\n        }));\n        return sub;\n    });\n}\n//# sourceMappingURL=scheduleArray.js.map","export function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport const iterator = getSymbolIterator();\nexport const $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","export const observable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\n//# sourceMappingURL=observable.js.map","export const rxSubscriber = (() => typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\nexport const $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","export function hostReportError(err) {\n    setTimeout(() => { throw err; }, 0);\n}\n//# sourceMappingURL=hostReportError.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","export const isArray = (() => Array.isArray || ((x) => x && typeof x.length === 'number'))();\n//# sourceMappingURL=isArray.js.map","export const isArrayLike = ((x) => x && typeof x.length === 'number' && typeof x !== 'function');\n//# sourceMappingURL=isArrayLike.js.map","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","export function isObject(x) {\n    return x !== null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","export function isPromise(value) {\n    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","export function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map","import { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map","import { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeToObservable = (obj) => (subscriber) => {\n    const obs = obj[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n        throw new TypeError('Provided object does not correctly implement Symbol.observable');\n    }\n    else {\n        return obs.subscribe(subscriber);\n    }\n};\n//# sourceMappingURL=subscribeToObservable.js.map","import { hostReportError } from './hostReportError';\nexport const subscribeToPromise = (promise) => (subscriber) => {\n    promise.then((value) => {\n        if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n        }\n    }, (err) => subscriber.error(err))\n        .then(null, hostReportError);\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToPromise.js.map","import { iterator as Symbol_iterator } from '../symbol/iterator';\nexport const subscribeToIterable = (iterable) => (subscriber) => {\n    const iterator = iterable[Symbol_iterator]();\n    do {\n        let item;\n        try {\n            item = iterator.next();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return subscriber;\n        }\n        if (item.done) {\n            subscriber.complete();\n            break;\n        }\n        subscriber.next(item.value);\n        if (subscriber.closed) {\n            break;\n        }\n    } while (true);\n    if (typeof iterator.return === 'function') {\n        subscriber.add(() => {\n            if (iterator.return) {\n                iterator.return();\n            }\n        });\n    }\n    return subscriber;\n};\n//# sourceMappingURL=subscribeToIterable.js.map","export const subscribeToArray = (array) => (subscriber) => {\n    for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n    }\n    subscriber.complete();\n};\n//# sourceMappingURL=subscribeToArray.js.map"],"sourceRoot":"webpack:///"}